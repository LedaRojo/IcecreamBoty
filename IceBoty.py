# -*- coding: utf-8 -*-
"""pruebachat.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UpPm_LcBYruwu_DFGDNfOCksrQJYpg-j
"""

#pip install fastapi uvicorn openai python-dotenv dotenv pandas openpyxl requests

from fastapi import FastAPI
from pydantic import BaseModel
from openai import OpenAI
from dotenv import load_dotenv
import os

# Cargar variables de entorno desde .env
load_dotenv()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# Inicializar cliente OpenAI
client = OpenAI(api_key=OPENAI_API_KEY)
model = "gpt-4o-mini"  # o el modelo que prefieras

# Inicializar FastAPI
app = FastAPI()

# JSON de entrada
class ChatRequest(BaseModel):
    chat_id: str = "test"
    message: str

# Diccionario del menú
MENU = {
    "helado": {
        "1/4 kilo": 2500,
        "1/2 kilo": 4000,
        "1 kilo": 7000,
    },
    "sabores": [
        "Dulce de leche", "Dulce de leche granizado", "Dulce de leche con almendras",
        "Chocolate", "Chocolate amargo", "Chocolate suizo",
        "Banana split", "Frutilla", "Frutilla a la crema",
        "Vainilla", "Limón", "Menta granizada"
    ],
    "toppings": {
        "Rocklets": 500,
        "Kit Kat": 700,
        "Oreo": 350,
    }
}

# Diccionario para almacenar el historial de cada usuario
contextos = {}

def get_user_context(chat_id):
    """Obtiene o inicializa el historial de conversación de un usuario."""
    if chat_id not in contextos:
        contextos[chat_id] = [{
            'role': 'system',
            'content': f"""
Eres OrderBot, un servicio automatizado para recolectar pedidos de heladería LIMAR.
Primero saludas al cliente, muestras el menú y los precios, luego recolectas el pedido.
Menú:
- 1/4 kilo: ${MENU['helado']['1/4 kilo']}
- 1/2 kilo: ${MENU['helado']['1/2 kilo']}
- 1 kilo: ${MENU['helado']['1 kilo']}

Sabores: {', '.join(MENU['sabores'])}

Toppings:
{chr(10).join([f"- {t}: ${MENU['toppings'][t]}" for t in MENU['toppings']])}

Recuerda confirmar el pedido, preguntar forma de pago y retiro o entrega.
Finalmente escribe: 'Los empleados le confirmarán el total (por si haya un error en mis cálculos) y le cobrarán.'
"""
        }]
    return contextos[chat_id]

def process_message(user_message, chat_id):
    context = get_user_context(chat_id)
    context.append({'role':'user','content':user_message})

    response = client.chat.completions.create(
        model=model,
        messages=context
    )
    bot_reply = response.choices[0].message.content
    context.append({'role':'assistant','content':bot_reply})
    return bot_reply

# Endpoint FastAPI
@app.post("/chat")
async def chat(request: ChatRequest):
    bot_reply = process_message(request.message, request.chat_id)
    return {"reply": bot_reply}